{
  // Codespaces環境に表示される名前
  "name": "Co-creation Compass Dev Environment",

  // どのdocker-compose.ymlファイルを使用するかを指定
  "dockerComposeFile": [
    "../docker-compose.yml"
  ],

  // Codespacesのターミナルがデフォルトで接続するサービス
  // Railsのコマンド(db:migrateなど)を実行することが多いので'web'を推奨
  "service": "web",

  // コンテナ内のワークスペースとしてマウントされるフォルダ
  // docker-compose.ymlのvolumesで指定したパスと一致させます
  "workspaceFolder": "/myapp",

  // --- ポート転送設定 ---
  // ここでの設定が、過去に問題となったネットワーク挙動を安定させます
  "portsAttributes": {
    // フロントエンド(React)用のポート
    "3000": {
      "label": "Frontend (React)",
      // ポートが利用可能になったら、自動的にブラウザで開く
      "onAutoForward": "openBrowser"
    },
    // バックエンド(Rails)用のポート
    "3001": {
      "label": "Backend (Rails)",
      // ポートが利用可能になったら、通知を表示する
      "onAutoForward": "notify"
    },
    // データベース(MySQL)用のポート
    "3306": {
      "label": "Database (MySQL)",
      // 自動転送は行わない
      "onAutoForward": "ignore"
    }
  },

  // --- 開発を便利にするVS Code拡張機能 ---
  "customizations": {
    "vscode": {
      "extensions": [
        // Docker関連の拡張機能
        "ms-azuretools.vscode-docker",
        // Rails開発に便利な拡張機能パック
        "KoichiSasada.vscode-rdbg",
        "castwide.solargraph",
        "rebornix.ruby",
        // React/JavaScript開発に便利な拡張機能
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        // その他
        "eamodio.gitlens" // Gitの履歴を強力にサポート
      ]
    }
  },

  // --- Codespaces作成後の自動実行コマンド ---
  // 教訓に基づき、ここでは何も実行しないことを推奨します。
  // bundle install や npm install は、Codespaces起動後に手動で実行する方が
  // 問題の切り分けがしやすくなります。
  // "postCreateCommand": "echo 'Codespace created! Run bundle install and npm install manually.'",

  // VS CodeのターミナルをCodespacesに接続したユーザーで実行
  "remoteUser": "vscode"
}
